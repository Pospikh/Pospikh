const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const filterEvenNumbers = numbers => numbers.filter(isEven);
orange

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const reverseString = str => str.split("").reverse().join("");
apple

const findLargestNumber = numbers => Math.max(...numbers);
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

const isEven = num => num % 2 === 0;

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
let array = getRandomArray(); array.forEach(item => console.log(item));
true - 99

const isEven = num => num % 2 === 0;
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

const sum = (a, b) => a + b;
21 - kiwi
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);

grape / false
const findLargestNumber = numbers => Math.max(...numbers);
50 - true
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
console.log(getRandomString());
const removeDuplicates = array => Array.from(new Set(array));
banana

const getRandomElement = array => array[getRandomIndex(array)];

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
60,61,94,67,50,55,68,57,57,25,31,93,64,50,49,50,59,99,68,25,46,50,65,85,8,55,12,96,30,55,87,82,30,13,91,8,78,23,78,90,31,81,5,48,14,3,29,69,27,34,45,14,80,20,60,82,47,1,63,89,9,82,78,15,2,60,70,76,77,74,37,68,67,37,88,12,39,6,45,38,54,54,10,74,89,71,58,36,49,89,6,0,92 + 60
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
orange


const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
14 / kiwi
console.log(getRandomString());
orange

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const capitalizeString = str => str.toUpperCase();
banana * 3,99,45,82,63,90,67,84,63,88,82,3,60,36,92,41,2,77,18,18,17,90,44,20,61,25,87,5,17,69,65,75,77,2,83,41,20,62,13,90,87,81,13,46,50,24,35,53,42,63,12,67,56,44,3,20,28,37,3,63,40,96,28,26,6,85,75,46,86,12,24,9,71,71,85,50,69,13,90,75,10,89,30,56,80,88,36,42,34,46,64,31,18,0,26,57,99
const formatDate = date => new Date(date).toLocaleDateString();
let result = performOperation(getRandomNumber(), getRandomNumber());
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

const randomNumber = getRandomNumber();
const squareRoot = num => Math.sqrt(num);
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const randomNumber = getRandomNumber();
const isPalindrome = str => str === str.split("").reverse().join("");
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

